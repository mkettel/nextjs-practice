'use client'

import { OrbitControls, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import { useMemo, useRef, useState } from 'react'
import { Line, useCursor, MeshDistortMaterial, useAnimations } from '@react-three/drei'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion-3d'
import { useTransform } from 'framer-motion'

export const Blob = ({ route = '/', ...props }) => {
  const router = useRouter()
  const [hovered, hover] = useState(false)
  useCursor(hovered)
  return (
    <mesh
      onClick={() => router.push(route)}
      onPointerOver={() => hover(true)}
      onPointerOut={() => hover(false)}
      {...props}>
      <sphereGeometry args={[1, 64, 64]} />
      <MeshDistortMaterial roughness={0.5} color={hovered ? 'hotpink' : '#1fb2f5'} />
    </mesh>
  )
}

export const Logo = ({ route = '/blob', ...props }) => {
  const mesh = useRef(null)
  const router = useRouter()

  const [hovered, hover] = useState(false)
  const points = useMemo(() => new THREE.EllipseCurve(0, 0, 3, 1.15, 0, 2 * Math.PI, false, 0).getPoints(100), [])

  useCursor(hovered)
  useFrame((state, delta) => {
    const t = state.clock.getElapsedTime()
    mesh.current.rotation.y = Math.sin(t) * (Math.PI / 8)
    mesh.current.rotation.x = Math.cos(t) * (Math.PI / 8)
    mesh.current.rotation.z -= delta / 4
  })

  return (
    <group ref={mesh} {...props}>
      {/* @ts-ignore */}
      <Line worldUnits points={points} color='#1fb2f5' lineWidth={0.15} />
      {/* @ts-ignore */}
      <Line worldUnits points={points} color='#1fb2f5' lineWidth={0.15} rotation={[0, 0, 1]} />
      {/* @ts-ignore */}
      <Line worldUnits points={points} color='#1fb2f5' lineWidth={0.15} rotation={[0, 0, -1]} />
      <mesh onClick={() => router.push(route)} onPointerOver={() => hover(true)} onPointerOut={() => hover(false)}>
        <sphereGeometry args={[0.55, 64, 64]} />
        <meshPhysicalMaterial roughness={0.5} color={hovered ? 'hotpink' : '#1fb2f5'} />
      </mesh>
    </group>
  )
}


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

export function Surfboard(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/butter-stick.glb");
  const { actions } = useAnimations(animations, group);
  return (
    <>
      <OrbitControls autoRotate autoRotateSpeed={1.5} minDistance={9} maxDistance={9} />
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <mesh
            name="surfboard"
            castShadow
            receiveShadow
            geometry={nodes.surfboard.geometry}
            material={materials.glossy}
            position={[0.039, 1.216, -0.292]}
            rotation={[0, 0, 0.001]}
            scale={[1, 1, 1.123]}
          />
          <mesh
            name="surftop"
            castShadow
            receiveShadow
            geometry={nodes.surftop.geometry}
            material={materials.rough}
            position={[0.039, 1.216, -0.292]}
            rotation={[0, 0, 0.001]}
            scale={[1, 1, 1.123]}
          />
          <mesh
            name="surfbottom"
            castShadow
            receiveShadow
            geometry={nodes.surfbottom.geometry}
            material={materials.rough}
            position={[0.039, 1.216, -0.292]}
            rotation={[0, 0, 0.001]}
            scale={[1, 1, 1.123]}
          />
          <mesh
            name="fin-1"
            castShadow
            receiveShadow
            geometry={nodes["fin-1"].geometry}
            material={materials.fin}
            position={[0.653, 0.078, -2.872]}
            rotation={[-3.084, 0, 3.141]}
            scale={[0.142, 0.366, 0.441]}
          />
          <mesh
            name="fin-2"
            castShadow
            receiveShadow
            geometry={nodes["fin-2"].geometry}
            material={materials.fin}
            position={[-0.476, 0.077, -2.872]}
            rotation={[-3.084, 0, 3.141]}
            scale={[0.142, 0.366, 0.441]}
          />
          <mesh
            name="topstripe-body"
            castShadow
            receiveShadow
            geometry={nodes["topstripe-body"].geometry}
            material={materials.Material}
            position={[0.028, 0.682, -0.006]}
            rotation={[-Math.PI, 0, 3.141]}
            scale={[0.016, 1, 3.522]}
          />
          <mesh
            name="bottomstripe"
            castShadow
            receiveShadow
            geometry={nodes.bottomstripe.geometry}
            material={materials.Material}
            position={[0.028, 0.362, -0.006]}
            rotation={[-Math.PI, 0, 3.141]}
            scale={[0.016, 1, 3.522]}
          />
          <mesh
            name="c1"
            castShadow
            receiveShadow
            geometry={nodes.c1.geometry}
            material={materials.Material}
            position={[0.077, 0.651, 0.756]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.128}
          />
          <mesh
            name="r1"
            castShadow
            receiveShadow
            geometry={nodes.r1.geometry}
            material={materials.Material}
            position={[0.067, 0.65, 0.613]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="e1"
            castShadow
            receiveShadow
            geometry={nodes.e1.geometry}
            material={materials.Material}
            position={[0.067, 0.645, 0.473]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="s1"
            castShadow
            receiveShadow
            geometry={nodes.s1.geometry}
            material={materials.Material}
            position={[0.067, 0.645, 0.336]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="c2"
            castShadow
            receiveShadow
            geometry={nodes.c2.geometry}
            material={materials.Material}
            position={[0.077, 0.645, 0.22]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.128}
          />
          <mesh
            name="e2"
            castShadow
            receiveShadow
            geometry={nodes.e2.geometry}
            material={materials.Material}
            position={[0.067, 0.643, 0.091]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="n"
            castShadow
            receiveShadow
            geometry={nodes.n.geometry}
            material={materials.Material}
            position={[0.075, 0.636, -0.024]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.116}
          />
          <mesh
            name="t"
            castShadow
            receiveShadow
            geometry={nodes.t.geometry}
            material={materials.Material}
            position={[0.065, 0.636, -0.134]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.116}
          />
          <mesh
            name="s2"
            castShadow
            receiveShadow
            geometry={nodes.s2.geometry}
            material={materials.Material}
            position={[0.067, 0.634, -0.594]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="h"
            castShadow
            receiveShadow
            geometry={nodes.h.geometry}
            material={materials.Material}
            position={[0.076, 0.635, -0.711]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.127}
          />
          <mesh
            name="a"
            castShadow
            receiveShadow
            geometry={nodes.a.geometry}
            material={materials.Material}
            position={[0.073, 0.629, -0.843]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.137}
          />
          <mesh
            name="p"
            castShadow
            receiveShadow
            geometry={nodes.p.geometry}
            material={materials.Material}
            position={[0.064, 0.629, -0.977]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.137}
          />
          <mesh
            name="e3"
            castShadow
            receiveShadow
            geometry={nodes.e3.geometry}
            material={materials.Material}
            position={[0.067, 0.629, -1.121]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="s3"
            castShadow
            receiveShadow
            geometry={nodes.s3.geometry}
            material={materials.Material}
            position={[0.067, 0.629, -1.255]}
            rotation={[Math.PI, 0, 3.141]}
            scale={0.147}
          />
          <mesh
            name="black-crescent-moon-png-2"
            castShadow
            receiveShadow
            geometry={nodes["black-crescent-moon-png-2"].geometry}
            material={materials["black-crescent-moon-png-2"]}
            position={[0.024, 0.64, -0.305]}
            rotation={[3.135, 0.078, 0.049]}
            scale={0.31}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/butter-stick.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

export function Falcon(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/peregrine-falcon.glb");
  const { actions } = useAnimations(animations, group);

  const multiplier = 1.0;

  const a = multiplier / 2;

  console.log(nodes);

  const rotationX = useTransform(props.mouse.x, [0, 1], [nodes.falcon.rotation.x - a, nodes.falcon.rotation.x + a]);

  const rotationY = useTransform(props.mouse.y, [0, 1], [nodes.falcon.rotation.y - a, nodes.falcon.rotation.y + a]);

  const positionX = useTransform(props.mouse.x, [0, 1], [nodes.falcon.position.x - multiplier * 2, nodes.falcon.position.x + multiplier * 2]);

  const positionY = useTransform(props.mouse.y, [0, 1], [nodes.falcon.position.y + multiplier * 2, nodes.falcon.position.y - multiplier * 2])

  // Change color of the falcon material
  const falconMaterial = materials.Material
  falconMaterial.color = new THREE.Color('white')
  falconMaterial.roughness = 0.5
  falconMaterial.metalness = 0.5

  return (
    <>
      <directionalLight intensity={1.5} position={[0, 8, 1]} color={'white'} />
      <directionalLight intensity={1.5} position={[-1, 8, 1]} color={'white'} />
      <ambientLight intensity={0.5} color={'blue'} />
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="Empty">
            <motion.mesh
              name="falcon"
              castShadow
              receiveShadow
              geometry={nodes.falcon.geometry}
              material={materials.Material}
              rotation-y={rotationX}
              rotation-x={rotationY}
              position-x={positionX}
              position-y={positionY}
              scale={0.596}
              mouse={props.mouse}
            />
          </group>
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/peregrine-falcon.glb");

